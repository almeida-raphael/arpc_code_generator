package templates


// ARPCServerProcedureDeclarationStruct struct for generating server procedure declarations
type ARPCServerProcedureDeclarationStruct struct {
	ProcedureName string
	ArgName  	  string
	ArgType  	  string
	ResponseType  string
}

// ARPCServerProcedureDeclaration server procedure declaration template
var ARPCServerProcedureDeclaration = `
	{{.ProcedureName}}({{.ArgName}} *{{.ArgType}})(*{{.ResponseType}}, error)
`

// ARPCServerProcedureStruct struct for generating server procedure
type ARPCServerProcedureStruct struct {
	ServiceName   string
	ProcedureName string
	ArgName  	  string
	ArgType  	  string
}

// ARPCServerProcedure server procedure declaration template
var ARPCServerProcedure = `
func bind{{.ProcedureName}}(server {{.ServiceName}}Server)(
	func(msg []byte)([]byte, error),
) {
	return func(msg []byte)([]byte, error){
		{{.ArgName}} := {{.ArgType}}{}
		err := {{.ArgName}}.UnmarshalBinary(msg)
		if err != nil {
			return nil, err
		}

		response, err := server.{{.ProcedureName}}(&{{.ArgName}})
		if err != nil {
			return nil, err
		}

		responseBytes, err := response.MarshalBinary()
		if err != nil {
			return nil, err
		}

		return responseBytes, nil
	}
}
`

// ServerARPCProcedureRegistrationStruct struct for generating a server registration entry
type ServerARPCProcedureRegistrationStruct struct {
	ProcedureIdx  int
	ProcedureName string
}


// ServerARPCProcedureRegistration server registration entry template
var ServerARPCProcedureRegistration = `
			{{.ProcedureIdx}}: bind{{.ProcedureName}}(srv),
`

// ARPCServerStruct struct for generating aRPC server code for a given service
type ARPCServerStruct struct {
	PackageName          			string
	ServiceHash          			string
	ServiceName          			string
	ServerARPCProcedureDeclarations string
	ServerARPCProcedures 			string
	ServerARPCProcedureRegister 	string
}

// ARPCServer server code template
var ARPCServer = `
package {{.PackageName}}

// Code generated by aRPC; DO NOT EDIT.

import "github.com/almeida-raphael/arpc/controller"

type {{.ServiceName}}Server interface {
	{{.ServerARPCProcedureDeclarations}}
}

{{.ServerARPCProcedures}}

func Register{{.ServiceName}}Server(controller controller.RPC, srv {{.ServiceName}}Server){
	controller.RegisterService(
		{{.ServiceHash}},
		map[uint16]func(message []byte)([]byte, error){
			{{.ServerARPCProcedureRegister}}
		},
	)
}
`
